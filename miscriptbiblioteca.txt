
-----------------------------------------------------------------------------------OBJETOS---------------------------------------------------------------------------

/////////// OBJETO DIRECCION\\\\\\\\\\\\\

create or replace TYPE DIRECCION AS OBJECT(
CALLE VARCHAR2(25),
CIUDAD VARCHAR2(20),
CODIGO_POST NUMBER(5),
MEMBER PROCEDURE SET_CALLE(C VARCHAR2),
MEMBER FUNCTION GET_CALLE RETURN VARCHAR2
);

/////////////CREAR OBJETO USUARIO\\\\\\\
create or replace TYPE USUARIO AS OBJECT(
NCARNET NUMBER,
DNI VARCHAR2(9),
NOMBRE VARCHAR2(35),
DIREC HR.DIRECCION,
PENALIZACION NUMBER
);
/////////////////////OBJETO LIBRO\\\\\\\\\\\\\\\\º

create or replace TYPE LIBRO AS OBJECT(
ID_LIBRO NUMBER,
TITULO VARCHAR2(30),
EDITORIAL VARCHAR2(35),
autor HR.AUTOR,
CLASE VARCHAR(20),
DISPONIBILIDAD NUMBER(1)
);


/////////////OBJETO AUTOR\\\\\\\\\\\\\

create or replace TYPE AUTOR AS OBJECT(
NOMBRE VARCHAR2(25),
APELLIDO1 VARCHAR2(20)

);

---------------------------------------------------------------------------USUARIOS--------------------------------------------------------------------------------------
/////////////////////CREAR TABLA USUARIO\\\\\\\\\\\\\\\\\\\\\\\\\\
CREATE TABLE USUARIOS OF USUARIO(
NCARNET PRIMARY KEY
);

//////////////SEQUENCIA USUARIOS\\\\\\\\\\\

CREATE SEQUENCE seq_lectores
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;


///////////////////////////cursor para SELECIONAR USUARIOS\\\\\\\\\\\\\\\\\\\\\\\\\\ 

create or replace PACKAGE      "CONSULTA_USER" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_usuarios(lista_registros OUT cursor_dinamico);

END;
create or replace PACKAGE BODY CONSULTA_USER
IS
   PROCEDURE obtener_usuarios(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT u.NCARNET,u.DNI,u.NOMBRE,u.DIREC.CALLE,u.DIREC.CIUDAD,u.DIREC.CODIGO_POST, u.PENALIZACION FROM USUARIOS u;
  END;
  END;

//////////////////////////////////PROCESO PARA CREAR USUARIOS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

create or replace PROCEDURE "CREAR_USER"(



dni IN USUARIOS.DNI%TYPE,
nombre IN USUARIOS.NOMBRE%TYPE,
calle IN USUARIOS.DIREC.CALLE%TYPE,
ciudad IN USUARIOS.DIREC.CIUDAD%TYPE,
cod_post IN USUARIOS.DIREC.CODIGO_POST%TYPE
)IS
BEGIN 
INSERT INTO USUARIOS VALUES(seq_lectores.NEXTVAL,dni,nombre,DIRECCION(calle,ciudad,cod_post),1);
END;

///PROCEDIMIENTO PARA EDITAR USUARIO
create or replace PROCEDURE "EDITAR_USER"(


nombre IN USUARIOS.NOMBRE%TYPE,
dni IN USUARIOS.DNI%TYPE,
calle IN USUARIOS.DIREC.CALLE%TYPE,
ciudad IN USUARIOS.DIREC.CIUDAD%TYPE,
cod_post IN USUARIOS.DIREC.CODIGO_POST%TYPE,
penalizacion IN USUARIOS.PENALIZACION%TYPE)IS
BEGIN 
UPDATE  USUARIOS U SET U.NOMBRE=nombre,U.DNI=dni,U.DIREC.CALLE=calle,U.DIREC.CIUDAD=ciudad,U.DIREC.CODIGO_POST=cod_post,U.PENALIZACION=penalizacion;
END;

//////////////////////////SELECIONAR POR ID\\\\\\\\\\\\\\\\\\\\\\º\\\

create or replace PACKAGE      "SELECT_USER_ID" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_usuarios_ID(lista_registros OUT cursor_dinamico,ncarnet IN USUARIOS.NCARNET%TYPE);

END;


create or replace PACKAGE BODY SELECT_USER_ID
IS
   PROCEDURE obtener_usuarios_ID(lista_registros OUT cursor_dinamico, ncarnet IN USUARIOS.NCARNET%TYPE) IS 
    BEGIN      

        OPEN lista_registros FOR 
        SELECT U.NCARNET, U.DNI,U.NOMBRE,U.DIREC.CALLE,U.DIREC.CIUDAD,U.DIREC.CODIGO_POST, U.PENALIZACION FROM USUARIOS U WHERE U.NCARNET=ncarnet;
  END;
  END;
///////////////////////ELIMINAR USUARIO\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
create or replace PROCEDURE      "ELIMINAR_USER" (
      iden IN USUARIOS.NCARNET%TYPE
) IS
BEGIN
    DELETE FROM USUARIOS U WHERE U.NCARNET=iden;
END;

/////////DEPENALIZAR USUARIO \\\\\\\\\\

create or replace PROCEDURE "DESPENALIZAR"(


id IN USUARIOS.NCARNET%TYPE
)IS
BEGIN 
UPDATE  USUARIOS U SET PENALIZACION=1 WHERE U.NCARNET=id;
END;

--------------------------------------------------------------------------------LIBRO---------------------------------------------------------------------------------------



////////////////////////////CREAR TABLA LIBRO\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE TABLE LIBROS OF LIBRO(
ID_LIBRO PRIMARY KEY
);

///////////////////////SECUENCIA LIBR INCREMENTAL\\\\\\\\\\\\\\\\\\
CREATE SEQUENCE seq_libro
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

//// IMPRIMIR LIBROS\\\\\\\\\\\\\\
create or replace PACKAGE      "CONSULTA_LIBROS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_libros(lista_registros OUT cursor_dinamico);

END;
create or replace PACKAGE BODY CONSULTA_LIBROS
IS
   PROCEDURE obtener_libros(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT L.ID_LIBRO, L.TITULO, L.EDITORIAL, L.AUTOR.NOMBRE, L.AUTOR.APELLIDO1, L.CLASE, L.DISPONIBILIDAD  FROM LIBROS L;
  END;
  END;

////////////////INSERTA LIBROS\\\\\\\\\\\\\\\\\\\\

create or replace PROCEDURE "CREAR_LIBRO"(
titulo IN LIBROS.TITULO%TYPE, 
editorial IN LIBROS.EDITORIAL%TYPE,
nombre_autor IN LIBROS.autor.NOMBRE%TYPE,
apellido IN LIBROS.autor.APELLIDO1%TYPE, 
clase IN LIBROS.CLASE%TYPE,
disponibilidad IN LIBROS.DISPONIBILIDAD%TYPE)IS
BEGIN 
INSERT INTO LIBROS l VALUES(seq_lectores.NEXTVAL,titulo,editorial,AUTOR(nombre_autor,apellido),clase,disponibilidad);
END;
////////////////ELIMINAR LIBROS\\\\\\\\\\\\\\\\\\\\\
create or replace PROCEDURE      "ELIMINAR_LIBRO" (
      id IN LIBROS.ID_LIBRO%TYPE
) IS
BEGIN
    DELETE FROM LIBROS L  WHERE L.ID_LIBRO=id;
END;


//////////////////IMPRIMIR LIBROS POR ID\\\\\\\\\\\\

create or replace PACKAGE      "SELECT_LIBRO_ID" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_libros_ID(lista_registros OUT cursor_dinamico,id_libro IN LIBROS.ID_LIBRO%TYPE);

END;
create or replace PACKAGE BODY SELECT_LIBRO_ID
IS
   PROCEDURE obtener_libros_ID(lista_registros OUT cursor_dinamico, id_libro IN LIBROS.ID_LIBRO%TYPE) IS 
    BEGIN      

        OPEN lista_registros FOR 
        SELECT L.ID_LIBRO, L.TITULO,L.EDITORIAL,L.AUTOR.NOMBRE,L.AUTOR.APELLIDO1,L.CLASE, L.DISPONIBILIDAD FROM LIBROS L WHERE L.ID_LIBRO=id_libro;
  END;
  END;

////////////////////////////////  DEVOLVER LIBRO \\\\\\\\\ cuando me haga un delete en la tabla prestamos se lanzará un disparador que me insertara \\\\\\\\\\\\\\
/// esa fila eliminada y me lo inserta en historicos \\\\\\\\\\\\\\\\\\\\\\\ 


create or replace PROCEDURE DEVOLVER_LIBRO(

  nid_libro IN LIBROS.ID_LIBRO%TYPE, press IN number)IS
  
   DISP NUMBER;

	fe_entrega DATE;
  id_user NUMBER;
  f_limite DATE;
  BEGIN 

  SELECT  DISPONIBILIDAD INTO DISP FROM LIBROS  WHERE ID_LIBRO=nid_libro;

  UPDATE LIBROS SET DISPONIBILIDAD=1 WHERE ID_LIBRO=nid_libro;
   select   CURRENT_TIMESTAMP into fe_entrega from dual;
   UPDATE PRESTAMOS p SET p.FECHA_ENTREGA=fe_entrega WHERE p.ID_PRESTAMO=press; 
  SELECT FECHA_LIMITE INTO f_limite FROM PRESTAMOS WHERE ID_PRESTAMO=press;
 
  IF fe_entrega> f_limite THEN
SELECT DEREF(USUARIO).NCARNET INTO id_user FROM PRESTAMOS  WHERE ID_PRESTAMO=press;
  UPDATE USUARIOS SET PENALIZACION=0 WHERE NCARNET=id_user;
  END IF;
  
DELETE PRESTAMOS WHERE ID_PRESTAMO= press;

  END;
-----------------------------------------------------------------------------------CLASE-------------------------------------------------------------------------------
CREATE TABLE CLASE (
GENERO VARCHAR2(25),
DIAS NUMBER

);

//////SELECIONAR CLASES\\\\\\\\\º

create or replace PACKAGE      "SELECT_CLASES" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_clases(lista_registros OUT cursor_dinamico);

END;
create or replace PACKAGE BODY SELECT_CLASES
IS
   PROCEDURE obtener_clases(lista_registros OUT cursor_dinamico) IS 
    BEGIN      

        OPEN lista_registros FOR 
        SELECT GENERO,DIAS FROM CLASE;
  END;
  END;
---------------------------------------------------------------------------PRESTAMOS------------------------------------------------------------------------------------

CREATE TABLE PRESTAMOS (
ID_PRESTAMO NUMBER PRIMARY KEY,
FECHA_INICIO DATE NOT NULL,
FECHA_LIMITE DATE NOT NULL,
FECHA_ENTREGA DATE, 
libro REF LIBRO SCOPE IS LIBROS,
usuario REF USUARIO SCOPE IS USUARIOS

);

//////////////SEQ PRESTAMO\\\\\\\
CREATE SEQUENCE seq_prestamo
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

////////CREAR PRESTAMO\\\\\\\\\\\\\\

create or replace PROCEDURE "CREAR_PRESTAMO"(

  nid_libro IN LIBROS.ID_LIBRO%TYPE,
  id_usuario IN USUARIOS.NCARNET%TYPE, clase VARCHAR2)IS
  
   DISPO NUMBER;
   dias_clase NUMBER;
	dia_hoy DATE;
  
  BEGIN 
  select   CURRENT_TIMESTAMP into dia_hoy from dual;
  SELECT  l.DISPONIBILIDAD INTO DISPO FROM LIBROS l WHERE l.ID_LIBRO=nid_libro;
  SELECT DIAS INTO dias_clase FROM CLASE WHERE GENERO=clase;  

  IF DISPO=1 THEN
  UPDATE LIBROS SET DISPONIBILIDAD=0 WHERE ID_LIBRO=nid_libro;
  
  
  INSERT INTO PRESTAMOS(ID_PRESTAMO,FECHA_INICIO,FECHA_LIMITE,FECHA_ENTREGA,LIBRO,USUARIO)
  SELECT seq_prestamo.NEXTVAL,dia_hoy,dia_hoy+dias_clase,NULL,REF(L),REF(US) FROM  LIBROS L, USUARIOS US WHERE L.ID_LIBRO=nid_libro AND  US.NCARNET=id_usuario;
END IF;
  END;
////////////////////////////LISTAR PRESTAMOS\\\\\\\\\\\\\\\

create or replace PACKAGE      "LISTAR_PRESTAMO" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_prestamos(lista_registros OUT cursor_dinamico);
	
END;
create or replace PACKAGE BODY LISTAR_PRESTAMO
IS
   PROCEDURE obtener_prestamos(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID_PRESTAMO,FECHA_INICIO,FECHA_LIMITE,FECHA_ENTREGA,  P.LIBRO.ID_LIBRO, P.USUARIO.NCARNET, p.USUARIO.PENALIZACION FROM PRESTAMOS p;
  END;
º                       

create or replace PROCEDURE DEVOLVER_LIBRO(

  nid_libro IN LIBROS.ID_LIBRO%TYPE, press IN number)IS
  
   DISP NUMBER;

	fe_entrega DATE;
  id_user NUMBER;
  f_limite DATE;
  BEGIN 

  SELECT  DISPONIBILIDAD INTO DISP FROM LIBROS  WHERE ID_LIBRO=nid_libro;

  UPDATE LIBROS SET DISPONIBILIDAD=1 WHERE ID_LIBRO=nid_libro;
   select   CURRENT_TIMESTAMP into fe_entrega from dual;
   UPDATE PRESTAMOS p SET p.FECHA_ENTREGA=fe_entrega WHERE p.ID_PRESTAMO=press; 
  SELECT FECHA_LIMITE INTO f_limite FROM PRESTAMOS WHERE ID_PRESTAMO=press;
 
  IF fe_entrega> f_limite THEN
SELECT DEREF(USUARIO).NCARNET INTO id_user FROM PRESTAMOS  WHERE ID_PRESTAMO=press;
  UPDATE USUARIOS SET PENALIZACION=0 WHERE NCARNET=id_user;
  END IF;
  
DELETE PRESTAMOS WHERE ID_PRESTAMO= press;

  END;

///////////////////////////LISTAR HITORICO\\\\\\\\\\\\\\\\  

create or replace PACKAGE      "VER_HISTORICO" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_historico(lista_registros OUT cursor_dinamico);

END;
create or replace PACKAGE BODY VER_HISTORICO
IS
   PROCEDURE obtener_historico(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
       SELECT ID_PRESTAMO,FECHA_INICIO,FECHA_ENTREGA,FECHA_LIMITE,H.USUARIO.NCARNET,H.LIBRO.ID_LIBRO FROM HISTORICOS H;
  END;
  END;
/////////TABLA HISTORICO\\\\\\\

CREATE TABLE HISTORICOS (
ID_PRESTAMO NUMBER ,
FECHA_INICIO DATE ,
FECHA_LIMITE DATE ,
FECHA_ENTREGA DATE, 
libro HR.LIBRO,
usuario HR.USUARIO 

);



/////////////////INSERTAR HISTORICO//////////////////

create or replace trigger insertar_historico before delete on PRESTAMOS FOR EACH ROW
BEGIN
 INSERT INTO HISTORICOS VALUES(seq_historicos.NEXTVAL,:OLD.FECHA_INICIO,:OLD.FECHA_LIMITE,:OLD.FECHA_ENTREGA,DEREF(:OLD.LIBRO),DEREF(:OLD.USUARIO));

 
 end;                                                                            